/*
 *
 * SDHCALCluster.cc source template automatically generated by a class generator
 * Creation date : lun. mars 30 2015
 *
 * This file is part of SDHCALContent libraries.
 * 
 * SDHCALContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "SDHCALObjects/Cluster.h"

namespace sdhcal_content
{
  SDHCALCluster::SDHCALCluster(const PandoraContentApi::Cluster::Parameters &parameters) :
      pandora::Cluster(parameters),
	  m_axis(0., 0., 0.), m_intercept(0., 0., 0.), m_centroid(0., 0., 0.),
	  m_startingPoint(0., 0., 0.), m_endpoint(0., 0., 0.),
	  m_isPhoton(false), m_isRoot(false), m_hasMotherAtSearch(false), m_isFragment(false), m_motherAtSearch(nullptr)
  {
  }

  SDHCALCluster::~SDHCALCluster()
  {
  }

  void SDHCALCluster::ResetRelationShip()
  {
	m_motherCluster.clear();
	m_clustersToMerge.clear();
	m_nearbyClusters.clear();
	m_orderWithMotherClusters.clear();

	m_hasMotherAtSearch = false;
	m_motherAtSearch = nullptr;
  }

  void SDHCALCluster::Reset()
  {
	ResetRelationShip();

	m_isPhoton = false;
	m_isRoot = false;
	m_isFragment = false;

	m_axis.SetValues(0., 0., 0.);
	m_intercept.SetValues(0., 0., 0.);
	m_centroid.SetValues(0., 0., 0.);
	m_startingPoint.SetValues(0., 0., 0.);
	m_endpoint.SetValues(0., 0., 0.);

	m_mainOrderedClusterHits.Reset();
	m_mainClusterHits.clear();
  }

  float SDHCALCluster::GetMergedHadronicEnergy()
  {
	  float hadronicEnergy = 0.;

	  hadronicEnergy += GetHadronicEnergy();

	  for(auto& cluster : m_clustersToMerge)
	  {
		  hadronicEnergy += cluster->GetMergedHadronicEnergy();
	  }

	  return hadronicEnergy;
  }

  std::vector<SDHCALCluster*>& SDHCALCluster::GetMotherCluster()
  {
	  return m_motherCluster;
  }

  void SDHCALCluster::ClearMotherCluster()
  {
	  m_motherCluster.clear();
  }

  const std::set<SDHCALCluster*>& SDHCALCluster::GetClustersToMerge() const
  {
	  return m_clustersToMerge;
  }

  void SDHCALCluster::ClearClustersToMerge()
  {
	  m_clustersToMerge.clear();
  }

  void SDHCALCluster::GetAllClustersToMerge(std::set<SDHCALCluster*>& allClustersToMerge) const
  {
	  auto& clusters = GetClustersToMerge();

	  //for(int iClu = 0; iClu < clusters.size(); ++iClu)
	  for(auto& clu : clusters)
	  {
		  //auto& clu = cluIter; 
		  if(clu->GetMotherCluster().size() > 1) 
		  {
			  std::cout << " ------ merging issue: " << clu << ", E: " << clu->GetHadronicEnergy() 
				  << ", mothers: " << clu->GetMotherCluster().size() << std::endl;

			  auto& mothers = clu->GetMotherCluster();
			  for(auto& mother : mothers)
			  {
				  std::cout << "   --- mother: " << mother << std::endl;
			  }

		      std::cout << "   GetAllClustersToMerge error!"  << std::endl;
			  throw pandora::StatusCodeException(pandora::STATUS_CODE_FAILURE);
		  }

		  clu->GetAllClustersToMerge(allClustersToMerge);
		  allClustersToMerge.insert(clu);

		  clu->ClearClustersToMerge();
	  }
  }

  const std::vector<SDHCALCluster*>& SDHCALCluster::GetNearbyClusters() const
  {
	  return m_nearbyClusters;
  }

  const SDHCALCluster* SDHCALCluster::GetMotherAtSearch() const
  {
	  return m_motherAtSearch;
  }

  const pandora::CartesianVector& SDHCALCluster::GetAxis() const
  {
	  return m_axis;
  }

  const pandora::CartesianVector& SDHCALCluster::GetIntercept() const
  {
	  return m_intercept;
  }

  const pandora::CartesianVector& SDHCALCluster::GetCentroid() const
  {
	  return m_centroid;
  }

  const pandora::CartesianVector& SDHCALCluster::GetStartingPoint() const
  {
	  return m_startingPoint;
  }

  const pandora::CartesianVector& SDHCALCluster::GetEndpoint() const
  {
	  return m_endpoint;
  }

  const pandora::OrderedCaloHitList& SDHCALCluster::GetMainOrderedClusterHits() const
  {
	  return m_mainOrderedClusterHits;
  }

  const pandora::CaloHitList& SDHCALCluster::GetMainClusterHits() const
  {
	  return m_mainClusterHits;
  }

  bool SDHCALCluster::IsRoot()
  {
	  return m_isRoot;
  }

  bool SDHCALCluster::IsFragment()
  {
	  return m_isFragment;
  }

#if 0
  bool SDHCALCluster::HasMotherAtSearch()
  {
	  return (m_motherAtSearch != nullptr);
  }
#endif

  bool SDHCALCluster::HasMotherAtSearch()
  {
	  return m_hasMotherAtSearch;
  }

  bool SDHCALCluster::IsDaughter(SDHCALCluster* cluster)
  {
	  bool isDaughter = false;
	  
	  auto& mothers = GetMotherCluster();

      if(mothers.end() != std::find(mothers.begin(), mothers.end(), cluster))
      {
          isDaughter = true;
      }
	  else
	  {
		  for(auto motherCluster : mothers)
		  {
			  if(motherCluster->IsDaughter(cluster))
			  {
				  isDaughter = true;
				  break;
			  }
		  }
	  }

	  return isDaughter;
  }

  bool SDHCALCluster::IsPhoton()
  {
	  return m_isPhoton;
  }

  void SDHCALCluster::SetHasMotherAtSearch(bool hasMotherAtSearch)
  {
	  m_hasMotherAtSearch = hasMotherAtSearch;
  }

  void SDHCALCluster::SetMotherAtSearch(SDHCALCluster* motherCluster)
  {
	  if(HasMotherAtSearch()) return;
	  m_motherAtSearch = motherCluster;
  }

  void SDHCALCluster::ResetMotherAtSearch()
  {
	  m_motherAtSearch = nullptr;
  }

  void SDHCALCluster::SetMotherCluster(SDHCALCluster* cluster)
  {
	  //std::cout << "The mother cluster of " << this << " is set to " << cluster << std::endl;
	  m_motherCluster.push_back(cluster);
  }

  void SDHCALCluster::SetClustersToMerge(const std::vector<SDHCALCluster*>& clusterVector)
  {
	  std::set<SDHCALCluster*> clustersToMerge;

	  for(int i = 0; i < clusterVector.size(); ++i)
	  {
		  auto cluster = clusterVector.at(i);

		  if(!cluster->IsDaughter(this))
		  {
			  cluster->SetMotherCluster(this);
			  clustersToMerge.insert(cluster);
		  }
	  }

	  m_clustersToMerge.insert(clustersToMerge.begin(), clustersToMerge.end());
  }

  void SDHCALCluster::RemoveFromClustersToMerge(SDHCALCluster* cluster)
  {
	  m_clustersToMerge.erase(cluster);
	  //std::cout << " m_clustersToMerge size: " << m_clustersToMerge.size() << std::endl;
  }

  void SDHCALCluster::SetNearbyClusters(const std::vector<SDHCALCluster*>& clusterVector)
  {
	  m_nearbyClusters = clusterVector;
  }

  void SDHCALCluster::SetAxis(pandora::CartesianVector axis)
  {
	  m_axis = axis;
  }

  void SDHCALCluster::SetIntercept(pandora::CartesianVector intercept)
  {
	  m_intercept = intercept;
  }

  void SDHCALCluster::SetCentroid(pandora::CartesianVector centroid)
  {
	  m_centroid = centroid;
  }

  void SDHCALCluster::SetStartingPoint(pandora::CartesianVector startingPoint)
  {
	  m_startingPoint = startingPoint;
  }

  void SDHCALCluster::SetEndpoint(pandora::CartesianVector endpoint)
  {
	  m_endpoint = endpoint;
  }
	
  void SDHCALCluster::SetMainOrderedClusterHits(pandora::OrderedCaloHitList mainOrderedClusterHits)
  {
	  m_mainOrderedClusterHits = mainOrderedClusterHits;
  }

  void SDHCALCluster::SetMainClusterHits(pandora::CaloHitList mainClusterHits)
  {
	  m_mainClusterHits = mainClusterHits;
  }
	
  void SDHCALCluster::SetOrderParameterWithMother(SDHCALCluster* motherCluster, ClustersOrderParameter& clustersOrderParameter)
  {
	  if(m_orderWithMotherClusters.find(motherCluster) == m_orderWithMotherClusters.end())
	  {
		  m_orderWithMotherClusters[motherCluster] = clustersOrderParameter;
	  }
	  else
	  {
		  //std::cout << "SetOrderParameterWithMother has the mother alreay!"  << std::endl; 
		  //throw pandora::StatusCodeException(pandora::STATUS_CODE_FAILURE);
	  }
  }

  ClustersOrderParameter SDHCALCluster::GetOrderParameterWithMother(SDHCALCluster* motherCluster)
  {
	  auto orderIter = m_orderWithMotherClusters.find(motherCluster);

	  if(orderIter != m_orderWithMotherClusters.end())
	  {
		  return orderIter->second;
	  }
	  else
	  {
		  ClustersOrderParameter clustersOrderParameter;
		  return clustersOrderParameter;
	  }
  }
	
  void SDHCALCluster::SetPhoton(bool isPhoton)
  {
	  m_isPhoton = isPhoton;
  }

  void SDHCALCluster::SetRoot()
  {
	  m_isRoot = true;
  }

  void SDHCALCluster::SetFragment()
  {
	  m_isFragment = true;
  }
  
} 

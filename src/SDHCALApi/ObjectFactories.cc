/// \file ObjectFactories.cc
/*
 *
 * ObjectFactories.cc source template automatically generated by a class generator
 * Creation date : mar. avr. 28 2015
 *
 * This file is part of SDHCALContent libraries.
 * 
 * SDHCALContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#include "SDHCALApi/ObjectFactories.h"
#include "SDHCALObjects/CaloHit.h"
#include "SDHCALObjects/Track.h"

namespace sdhcal_content
{

  PandoraApi::CaloHit::Parameters *CaloHitFactory::NewParameters() const
  {
    return new PandoraApi::CaloHit::Parameters();
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode CaloHitFactory::Read(PandoraApi::CaloHit::Parameters &/*parameters*/, pandora::FileReader &/*fileReader*/) const
  {
    /* nop */
    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode CaloHitFactory::Write(const pandora::CaloHit *const /*pCaloHit*/, pandora::FileWriter &/*fileWriter*/) const
  {
    /* nop */
    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode CaloHitFactory::Create(const PandoraApi::CaloHit::Parameters &parameters, const pandora::CaloHit *&pCaloHit) const
  {
    pCaloHit = NULL;
    const sdhcal_content::CaloHit *pSDHCALCaloHit = NULL;

    try
    {
      pSDHCALCaloHit = new sdhcal_content::CaloHit(parameters);

      if(NULL == pSDHCALCaloHit)
        return pandora::STATUS_CODE_FAILURE;
    }
    catch(pandora::StatusCodeException &statusCodeException)
    {
      std::cout << "CaloHitFactory: failed to create a sdhcal_content::CaloHit object : " << statusCodeException.ToString() << std::endl;

      if(NULL != pSDHCALCaloHit)
        delete pSDHCALCaloHit;

      return statusCodeException.GetStatusCode();
    }

    pCaloHit = pSDHCALCaloHit;

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  PandoraApi::Track::Parameters *TrackFactory::NewParameters() const
  {
    return new PandoraApi::Track::Parameters();
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode TrackFactory::Read(PandoraApi::Track::Parameters &/*parameters*/, pandora::FileReader &/*fileReader*/) const
  {
    /* nop */
    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode TrackFactory::Write(const pandora::Track *const /*pTrack*/, pandora::FileWriter &/*fileWriter*/) const
  {
    /* nop */
    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode TrackFactory::Create(const PandoraApi::Track::Parameters &parameters, const pandora::Track *&pTrack) const
  {
    pTrack = NULL;
    const sdhcal_content::Track *pSDHCALTrack = NULL;

    try
    {
      pSDHCALTrack = new sdhcal_content::Track(parameters);

      if(NULL == pSDHCALTrack)
        return pandora::STATUS_CODE_FAILURE;
    }
    catch(pandora::StatusCodeException &statusCodeException)
    {
      std::cout << "TrackFactory: failed to create a sdhcal_content::Track object : " << statusCodeException.ToString() << std::endl;

      if(NULL != pSDHCALTrack)
        delete pSDHCALTrack;

      return statusCodeException.GetStatusCode();
    }

    pTrack = pSDHCALTrack;

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  PandoraContentApi::Cluster::Parameters *ClusterFactory::NewParameters() const
  {
    return new PandoraContentApi::Cluster::Parameters();
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode ClusterFactory::Read(PandoraContentApi::Cluster::Parameters &/*parameters*/, pandora::FileReader &/*fileReader*/) const
  {
    /* nop */
    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode ClusterFactory::Write(const pandora::Cluster *const /*pCluster*/, pandora::FileWriter &/*fileWriter*/) const
  {
    /* nop */
    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode ClusterFactory::Create(const PandoraContentApi::Cluster::Parameters &parameters, const pandora::Cluster *&pCluster) const
  {
    pCluster = NULL;
    const sdhcal_content::SDHCALCluster *pSDHCALCluster = NULL;

    try
    {
      pSDHCALCluster = new sdhcal_content::SDHCALCluster(parameters);

      if(NULL == pSDHCALCluster)
        return pandora::STATUS_CODE_FAILURE;
    }
    catch(pandora::StatusCodeException &statusCodeException)
    {
      std::cout << "ClusterFactory: failed to create a sdhcal_content::Cluster object : " << statusCodeException.ToString() << std::endl;

      if(NULL != pSDHCALCluster)
        delete pSDHCALCluster;

      return statusCodeException.GetStatusCode();
    }

    pCluster = pSDHCALCluster;

    return pandora::STATUS_CODE_SUCCESS;
  }
} 



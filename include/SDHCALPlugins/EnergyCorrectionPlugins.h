/// \file EnergyCorrectionPlugin.h
/*
 *
 * EnergyCorrectionPlugin.h header template automatically generated by a class generator
 * Creation date : mar. nov. 17 2015
 * Updated november 2023 by Tanguy Pasquier
 *
 * This file is part of SDHCALContent libraries.
 * 
 * SDHCALContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef SDHCAL_CONTENT_ENERGYCORRECTIONPLUGIN_H
#define SDHCAL_CONTENT_ENERGYCORRECTIONPLUGIN_H

#include "Plugins/EnergyCorrectionsPlugin.h"

namespace sdhcal_content
{

  /**
   *  @brief  AnalogicEnergyFunction
   */
  class AnalogicEnergyFunction : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    AnalogicEnergyFunction();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:
    unsigned int                   m_ecalEnergyType;
    unsigned int                   m_hcalEnergyType;
    unsigned int                   m_muonEnergyType;
    unsigned int                   m_otherEnergyType;
  };

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  /**
   *  @brief  SdhcalQuadraticEnergyFunction class
   */
  class SdhcalQuadraticEnergyFunction : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    SdhcalQuadraticEnergyFunction();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:

    pandora::FloatVector                m_sdhcalThresholds;             ///< The sdhcal threshold values
    pandora::FloatVector                m_energyConstantParameters;    ///< The energy constant parameters
  };

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  /**
   *  @brief  BarrelGapEnergyFunction class
   */
  class BarrelGapEnergyFunction : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    BarrelGapEnergyFunction();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:
    /**
     *  @brief  Approach enum
     */
    enum Approach
    {
      INNER_GAP_APPROACH = -1,
      FAR_FROM_GAP = 0,
      OUTER_GAP_APPROACH = 1
    };

    /**
     *  @brief  Whether the calo hit is near a detector gap
     */
    bool IsNearbyGap(const pandora::CaloHit *const pCaloHit) const;

    /**
     *  @brief  Get the calo hit approach to barrel module gap
     */
    Approach GetApproach(const pandora::CaloHit *const pCaloHit) const;

  private:
    pandora::FloatVector                m_ecalZGapPositions;
    pandora::FloatVector                m_hcalZGapPositions;

    float                               m_ecalDistanceToGap;
    float                               m_hcalDistanceToGap;

    float                               m_ecalGapAlpha;
    float                               m_ecalGapBeta;
    float                               m_hcalGapAlpha;
    float                               m_hcalGapBeta;
  };

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  /**
   *  @brief  ThetaNHitFunction class
   */
  class ThetaNHitFunction : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    ThetaNHitFunction();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:
    /**
     *  @brief  Get cos theta with respect to z axis
     */
    float GetCosTheta(const pandora::Cluster *const pCluster) const;

    /**
     *  @brief  Get the corrected number of hits
     *
     *  @param  The number of hits to correct
     *  @param  The cluster cos theta
     */
    float GetCorrectedHitNumber(int nHit, float cosTheta) const;


  private:
    float                       m_lowEnergyCut;
    pandora::FloatVector                m_sdhcalThresholds;             ///< The sdhcal threshold values
  };

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  /**
   *  @brief  PhiNHitTesla class
   */
  class PhiNHitTesla : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    PhiNHitTesla();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:
    /**
     *  @brief  Get cos phi with respect to x axis in the XY-plane
     */
    float GetCosPhi(const pandora::Cluster *const pCluster) const;

    /**
     *  @brief  Get the corrected number of hits
     *
     *  @param  The number of hits to correct
     *  @param  The cluster cos phi
     */
    float GetCorrectedHitNumber(int nHit, float cosPhi) const;


  private:
    float                       m_lowEnergyCut;
    pandora::FloatVector                m_sdhcalThresholds;             ///< The sdhcal threshold values
  };

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  /**
   *  @brief  PhiNHitVideau class
   */
  class PhiNHitVideau : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    PhiNHitVideau();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:
    /**
     *  @brief  Get cos phi with respect to y axis in the XY-plane
     */
    float GetCosPhi(const pandora::Cluster *const pCluster) const;

    /**
     *  @brief  Get the corrected number of hits
     *
     *  @param  The number of hits to correct
     *  @param  The cluster cos phi
     */
    float GetCorrectedHitNumber(int nHit, float cosPhi) const;


  private:
    float                       m_lowEnergyCut;
    pandora::FloatVector                m_sdhcalThresholds;             ///< The sdhcal threshold values
  };

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  /**
   *  @brief  AngleCorrectionPlugin class
   */
  class AngleCorrectionPlugin : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    AngleCorrectionPlugin();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:
    /**
     *  @brief  Get cos phi with respect to y axis in the XY-plane
     */
    float GetCosPhi(const pandora::Cluster *const pCluster) const;

    /**
     *  @brief  Get cos theta with respect to z axis
     */
    float GetCosTheta(const pandora::Cluster *const pCluster) const;

    /**
     *  @brief  Get the number of new hits created by the correction
     *
     *  @param  nHit The number of hits to correct
     *  @param  cosOrSinAngle The cluster cos or sin of the angle
     */
    float GetCorrectedHitNumber(int nHit, float cosOrSinAngle) const;


  private:
    float             m_lowEnergyCut;       ///< The energy cut under which the cluster energy wont be corrected
    bool              m_useDigi;            ///< Boolean to choose if you use digi collections or not
  };

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

    /**
     *   @brief  CleanCluster class. Correct cluster energy by searching for constituent calo hits with anomalously high energy.
     *           Corrections are made by examining the energy in adjacent layers of the cluster.
     */
    class CleanCluster : public pandora::EnergyCorrectionPlugin
    {
    public:
        /**
         *  @brief  Default constructor
         */
        CleanCluster();

        pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    private:
        /**
         *  @brief  Get the sum of the hadronic energies of all calo hits in a specified layer of an ordered calo hit list
         * 
         *  @param  orderedCaloHitList the ordered calo hit list
         *  @param  pseudoLayer the specified pseudolayer
         */
        float GetHadronicEnergyInLayer(const pandora::OrderedCaloHitList &orderedCaloHitList, const unsigned int pseudoLayer) const;

        pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

        float           m_minCleanHitEnergy;                ///< Min calo hit hadronic energy to consider cleaning hit/cluster
        float           m_minCleanHitEnergyFraction;        ///< Min fraction of cluster energy represented by hit to consider cleaning
        float           m_minCleanCorrectedHitEnergy;       ///< Min value of new hit hadronic energy estimate after cleaning
    };

} 

#endif  //  SDHCAL_CONTENT_ENERGYCORRECTIONPLUGIN_H
